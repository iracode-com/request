<?php

namespace App\Filament\Resources;

use App\Enums\UserRequestState;
use App\Enums\UserRole;
use App\Filament\Resources\UserRequestResource\Pages;
use App\Filament\Resources\UserRequestResource\RelationManagers;
use App\Models\RejectReason;
use App\Models\User;
use App\Models\UserRequest;
use App\Traits\BadgeTrait;
use App\Traits\LabelsTrait;
use Filament\Facades\Filament;
use Filament\Forms;
use Filament\Forms\Components\Section;
use Filament\Forms\Form;
use Filament\Forms\Get;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Actions\Action;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;

class UserRequestResource extends Resource
{
    use LabelsTrait, BadgeTrait;
    protected static ?string $model = UserRequest::class;

    // protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';

    public static function getNavigationGroup(): ?string
    {
        return __("User Requests");
    }

    public static function canCreate(): bool
    {
        return false;
    }

    public static function canEdit(Model $record): bool
    {
        return current_user_has_role(UserRole::ADMIN);
    }

    public static function canDelete(Model $record): bool
    {
        return false;
    }

    public static function canAccess(): bool
    {
        return current_user_has_role(UserRole::ADMIN);
    }

    public static function getEloquentQuery(): Builder
    {
        $query = static::getModel()::query()->whereNull('admin_user_id');

        if (
            static::isScopedToTenant() &&
            ($tenant = Filament::getTenant())
        ) {
            static::scopeEloquentQueryToTenant($query, $tenant);
        }

        return $query;
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Select::make('user_id')
                    ->label(__("User"))
                    ->disabled()
                    ->required()
                    ->options(function () {
                        return get_users_list();
                    }),
                // User Information Section
                // Generated By ClaudeAI
                Section::make(__('User Information'))
                    ->columns(3)
                    ->schema([
                        Forms\Components\Placeholder::make('user_name')
                            ->label(__('Name'))
                            ->content(function ($get, $record) {
                                if (!$record || !$record->user) {
                                    $userId = $get('user_id');
                                    if (!$userId)
                                        return 'No user selected';

                                    $user = User::find($userId);
                                    if (!$user)
                                        return 'User not found';

                                    return $user->name . ' ' . $user->family;
                                }

                                return $record->user->name . ' ' . $record->user->family;
                            }),

                        Forms\Components\Placeholder::make('user_email')
                            ->label(__('Email'))
                            ->content(function ($get, $record) {
                                if (!$record || !$record->user) {
                                    $userId = $get('user_id');
                                    if (!$userId)
                                        return '';

                                    $user = User::find($userId);
                                    if (!$user)
                                        return '';

                                    return $user->email;
                                }

                                return $record->user->email;
                            }),

                        Forms\Components\Placeholder::make('user_mobile')
                            ->label(__('Mobile'))
                            ->content(function ($get, $record) {
                                if (!$record || !$record->user) {
                                    $userId = $get('user_id');
                                    if (!$userId)
                                        return '';

                                    $user = User::find($userId);
                                    if (!$user)
                                        return '';

                                    return $user->mobile;
                                }

                                return $record->user->mobile;
                            }),

                        Forms\Components\Placeholder::make('user_type')
                            ->label(__('User Type'))
                            ->content(function ($get, $record) {
                                if (!$record || !$record->user) {
                                    $userId = $get('user_id');
                                    if (!$userId)
                                        return '';

                                    $user = User::find($userId);
                                    if (!$user)
                                        return '';

                                    return User::USER_TYPES[$user->user_type] ?? '';
                                }

                                return User::USER_TYPES[$record->user->user_type] ?? '';
                            }),
                    ])
                    ->visible(fn($get) => filled($get('user_id'))),

                // Dynamic Profile Information Section
                Section::make(__('Profile Information'))
                    ->columns(3)
                    ->schema(function (Forms\Get $get, $record) {
                        $userId = $get('user_id');
                        if (!$userId && (!$record || !$record->user)) {
                            return [
                                Forms\Components\Placeholder::make('no_user')
                                    ->content('No user selected'),
                            ];
                        }

                        $user = $userId ? User::find($userId) : $record->user;
                        if (!$user) {
                            return [
                                Forms\Components\Placeholder::make('user_not_found')
                                    ->content('User not found'),
                            ];
                        }

                        // Individual user (حقیقی - type 1)
                        if ($user->user_type == 1) {
                            $profile = $user->profile;

                            if (!$profile) {
                                return [
                                    Forms\Components\Placeholder::make('no_profile')
                                        ->content('No profile data available for this user'),
                                ];
                            }

                            return [

                                Forms\Components\Placeholder::make('profile.national_code')
                                    ->label(__('National Code'))
                                    ->content($profile->national_code ?? ''),

                                Forms\Components\Placeholder::make('profile.birthdate')
                                    ->label(__('Birth Date'))
                                    ->content($profile->birthdate ? \Morilog\Jalali\Jalalian::forge(date('Y-m-d', strtotime($profile->birthdate)))->format('%Y-%m-%d h:i:s') : ''),

                                Forms\Components\Placeholder::make('profile.fathername')
                                    ->label(__('Father\'s Name'))
                                    ->content($profile->fathername ?? ''),
                            ];
                        }
                        // Corporate user (حقوقی - type 2)
                        else if ($user->user_type == 2) {
                            $corporationProfile = $user->corporationProfile;

                            if (!$corporationProfile) {
                                return [
                                    Forms\Components\Placeholder::make('no_profile')
                                        ->content('No corporation profile data available for this user'),
                                ];
                            }

                            return [

                                Forms\Components\Placeholder::make('corporationProfile.company_code')
                                    ->label(__('Company Code'))
                                    ->content($corporationProfile->company_code ?? ''),

                                Forms\Components\Placeholder::make('corporationProfile.company_name')
                                    ->label(__('Company Name'))
                                    ->content($corporationProfile->company_name ?? ''),

                                Forms\Components\Placeholder::make('corporationProfile.company_owner_name')
                                    ->label(__('Company Owner Name'))
                                    ->content($corporationProfile->company_owner_name ?? ''),

                                Forms\Components\Placeholder::make('corporationProfile.company_owner_birthdate')
                                    ->label(__('Owner Birth Date'))
                                    ->content($corporationProfile->company_owner_birthdate
                                        ? \Morilog\Jalali\Jalalian::forge(date('Y-m-d', strtotime($corporationProfile->company_owner_birthdate)))->format('%Y-%m-%d')
                                        : ''),

                                Forms\Components\Placeholder::make('corporationProfile.company_owner_mobile')
                                    ->label(__('Owner Mobile'))
                                    ->content($corporationProfile->company_owner_mobile ?? ''),

                                Forms\Components\Placeholder::make('corporationProfile.company_owner_national_code')
                                    ->label(__('Owner National Code'))
                                    ->content($corporationProfile->company_owner_national_code ?? ''),

                                Forms\Components\Placeholder::make('corporationProfile.phone')
                                    ->label(__('Phone'))
                                    ->content($corporationProfile->phone ?? ''),

                                Forms\Components\Placeholder::make('corporationProfile.address')
                                    ->label(__('Address'))
                                    ->content($corporationProfile->address ?? ''),
                            ];
                        }
                        // No type selected yet
                        else {
                            return [
                                Forms\Components\Placeholder::make('unknown_type')
                                    ->content('Unknown user type'),
                            ];
                        }
                    })
                    ->visible(fn($get) => filled($get('user_id'))),

                Forms\Components\Hidden::make('tracking_code')
                    ->default(generateTrackingCode()),
                Forms\Components\TextInput::make('title')
                    ->required()
                    ->readOnly()
                    ->maxLength(255),
                Forms\Components\Textarea::make('text')
                    ->required()
                    ->readOnly()
                    ->columnSpanFull(),
                Forms\Components\FileUpload::make('attachment')
                    ->disabled(),
                // Forms\Components\Select::make('status')
                //     ->options(UserRequestState::class)
                //     ->searchable()
                //     ->live()
                //     ->required(),
                // Forms\Components\Select::make('reject_reason_id')
                //     ->required()
                //     ->searchable()
                //     ->visible(function (Get $get) {
                //         return $get('status') && $get('status') == UserRequestState::REJECTED->value;
                //     })
                //     ->options(RejectReason::where('is_active', 1)->get()->pluck('name', 'id')),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('user.name')
                    ->getStateUsing(function ($record) {
                        return $record->user?->name . ' ' . $record->user?->family . ' ' . (array_key_exists($record->user?->user_type, User::USER_TYPES) ? User::USER_TYPES[$record->user?->user_type] : '');
                    })
                    ->searchable(
                        query: fn(Builder $query, string $search) => $query->whereHas(
                            relation: 'user',
                            callback: fn(Builder $q) => $q->where('name', 'like', "%{$search}%")->orWhere('family', 'like', "%{$search}%")->orWhere('mobile', 'like', "%{$search}%")->orWhere(DB::raw('CONCAT(name, " ", family)'), 'like', '%' . $search . '%')
                        )
                    ),
                Tables\Columns\TextColumn::make('admin_user.name')
                    ->getStateUsing(function ($record) {
                        return $record->admin_user?->name . ' ' . $record->admin_user?->family;
                    })
                    ->searchable(
                        query: fn(Builder $query, string $search) => $query->whereHas(
                            relation: 'admin_user',
                            callback: fn(Builder $q) => $q->where('name', 'like', "%{$search}%")->orWhere('family', 'like', "%{$search}%")->orWhere('mobile', 'like', "%{$search}%")->orWhere(DB::raw('CONCAT(name, " ", family)'), 'like', '%' . $search . '%')
                        )
                    ),
                Tables\Columns\TextColumn::make('tracking_code')
                    ->searchable(),
                Tables\Columns\TextColumn::make('title')
                    ->searchable(),
                Tables\Columns\BadgeColumn::make('status')
                    ->badge(),
                Tables\Columns\TextColumn::make('approved_at')
                    ->jalaliDateTime()
                    ->sortable(),
                Tables\Columns\TextColumn::make('rejected_at')
                    ->jalaliDateTime()
                    ->sortable(),
                Tables\Columns\TextColumn::make('closed_at')
                    ->jalaliDateTime()
                    ->sortable(),
                Tables\Columns\TextColumn::make('reject_reason.name')
                    ->searchable(),
                Tables\Columns\TextColumn::make('created_at')
                    ->jalaliDateTime()
                    ->sortable(),
                Tables\Columns\TextColumn::make('updated_at')
                    ->jalaliDateTime()
                    ->sortable(),
            ])
            ->filters([
                // 
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
                Action::make('follow')
                    ->label(__('Accept User Request'))
                    ->requiresConfirmation()
                    ->modalSubheading(__('Are you sure you want to accept this user?'))
                    ->visible(function (Model $record) {
                        return $record->status == UserRequestState::PENDING;
                    })
                    ->action(function (Model $record) {
                        $record->admin_user_id = auth()->id();
                        $record->save();
                    })
                    ->icon('heroicon-o-user-plus')
                    ->color('success')
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListUserRequests::route('/'),
            'create' => Pages\CreateUserRequest::route('/create'),
            'edit' => Pages\EditUserRequest::route('/{record}/edit'),
        ];
    }
}
